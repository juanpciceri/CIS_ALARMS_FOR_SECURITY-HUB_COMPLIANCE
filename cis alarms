{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "CIS AWS Foundations Benchmark Metric Alarms",
    "Parameters": {
        "AlarmNotificationTopicARN": {
            "Description": "SNS topic to send alerts to",
            "Type": "String"
        },
        "CloudtrailLogGroupName": {
            "Description": "Name of the Cloudtrail log group",
            "Type": "String"
        }
    },
    "Resources": {
        "UnauthorizedApiCallsAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-Unauthorized Activity Attempt",
                "AlarmDescription": "Alarm if Multiple unauthorized actions or logins attempted",
                "MetricName": "UnauthorizedAttemptCount",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": "1",
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "UnauthorizedApiCallsFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.errorCode = \"*UnauthorizedOperation\") ||\n  ($.errorCode = \"AccessDenied*\")\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "UnauthorizedAttemptCount"
                    }
                ]
            }
        },
        "NoMfaConsoleLoginsAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-Console Signin Without MFA",
                "AlarmDescription": "Alarm if there is a Management Console sign-in without MFA",
                "MetricName": "ConsoleSigninWithoutMFA",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "NoMfaConsoleLoginsFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventName = \"ConsoleLogin\") &&\n  ($.additionalEventData.MFAUsed != \"Yes\")\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "ConsoleSigninWithoutMFA"
                    }
                ]
            }
        },
        "RootAccountLoginsAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": [
                "NoMfaConsoleLoginsAlarm"
            ],
            "Properties": {
                "AlarmName": "CIS-Root Activity",
                "AlarmDescription": "Alarm if a 'root' user uses the account",
                "MetricName": "RootUserEventCount",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "RootAccountLoginsFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  $.userIdentity.type = \"Root\" &&\n  $.userIdentity.invokedBy NOT EXISTS &&\n  $.eventType != \"AwsServiceEvent\"\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "RootUserEventCount"
                    }
                ]
            }
        },
        "IAMPolicyChangesAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-IAM Policy Changes",
                "AlarmDescription": "Alarm if an IAM policy changes",
                "MetricName": "IAMPolicyChangeEventCount",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "IAMPolicyChangesFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventName=DeleteGroupPolicy) ||\n  ($.eventName=DeleteRolePolicy) ||\n  ($.eventName=DeleteUserPolicy) ||\n  ($.eventName=PutGroupPolicy) ||\n  ($.eventName=PutRolePolicy) ||\n  ($.eventName=PutUserPolicy) ||\n  ($.eventName=CreatePolicy) ||\n  ($.eventName=DeletePolicy) ||\n  ($.eventName=CreatePolicyVersion) ||\n  ($.eventName=DeletePolicyVersion) ||\n  ($.eventName=AttachRolePolicy) ||\n  ($.eventName=DetachRolePolicy) ||\n  ($.eventName=AttachUserPolicy) ||\n  ($.eventName=DetachUserPolicy) ||\n  ($.eventName=AttachGroupPolicy) ||\n  ($.eventName=DetachGroupPolicy)\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "IAMPolicyChangeEventCount"
                    }
                ]
            }
        },
        "CloudtrailConfigChangesAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-Cloudtrail Config Changes",
                "AlarmDescription": "Alarm if the configuration for Cloudtrail changes",
                "MetricName": "CloudtrailConfigChangeEventCount",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "CloudtrailConfigChangesFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventName = CreateTrail) ||\n  ($.eventName = UpdateTrail) ||\n  ($.eventName = DeleteTrail) || \n  ($.eventName = StartLogging) ||\n  ($.eventName = StopLogging)\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "CloudtrailConfigChangeEventCount"
                    }
                ]
            }
        },
        "FailedConsoleLoginsAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": [
                "RootAccountLoginsAlarm"
            ],
            "Properties": {
                "AlarmName": "CIS-Console Login Failures",
                "AlarmDescription": "Alarm if there are AWS Management Console authentication failures",
                "MetricName": "ConsoleLoginFailures",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": "300",
                "EvaluationPeriods": "1",
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "FailedConsoleLoginsFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventName = ConsoleLogin) &&\n  ($.errorMessage = \"Failed authentication\")\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "ConsoleLoginFailures"
                    }
                ]
            }
        },
        "DisabledOrDeletedCmksAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": [
                "FailedConsoleLoginsAlarm"
            ],
            "Properties": {
                "AlarmName": "CIS-KMS Key Disabled or Scheduled for Deletion",
                "AlarmDescription": "Alarm if customer created CMKs get disabled or scheduled for deletion",
                "MetricName": "KMSCustomerKeyDeletion",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 60,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "DisabledOrDeletedCmksFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventSource = kms.amazonaws.com) &&\n  (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "KMSCustomerKeyDeletion"
                    }
                ]
            }
        },
        "S3BucketPolicyChangeAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-S3 Bucket Policy Changed",
                "AlarmDescription": "Alarm if any S3 bucket policies are changed",
                "MetricName": "S3BucketPolicyChanges",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "S3BucketPolicyChangeFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventSource = s3.amazonaws.com) &&\n  (($.eventName = PutBucketAcl) || \n    ($.eventName = PutBucketPolicy) || \n    ($.eventName = PutBucketCors) || \n    ($.eventName = PutBucketLifecycle) || \n    ($.eventName = PutBucketReplication) || \n    ($.eventName = DeleteBucketPolicy) || \n    ($.eventName = DeleteBucketCors) || \n    ($.eventName = DeleteBucketLifecycle) || \n    ($.eventName = DeleteBucketReplication))\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "S3BucketPolicyChanges"
                    }
                ]
            }
        },
        "AWSConfigConfigurationChangeAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-AWS Config Configuration has changed",
                "AlarmDescription": "Alarm if the configuration for AWS Config changes",
                "MetricName": "AWSConfigConfigurationChanges",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "AWSConfigConfigurationChangeFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventSource = config.amazonaws.com) && \n  (($.eventName=StopConfigurationRecorder)||\n   ($.eventName=DeleteDeliveryChannel)||\n   ($.eventName=PutDeliveryChannel)||\n   ($.eventName=PutConfigurationRecorder))\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "AWSConfigConfigurationChanges"
                    }
                ]
            }
        },
        "SecurityGroupChangeAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-Security Groups Have Changed",
                "AlarmDescription": "Alarm if there are any changes to security groups",
                "MetricName": "SecurityGroupChanges",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "SecurityGroupChangeFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventName = AuthorizeSecurityGroupIngress) || \n  ($.eventName = AuthorizeSecurityGroupEgress) || \n  ($.eventName = RevokeSecurityGroupIngress) || \n  ($.eventName = RevokeSecurityGroupEgress) || \n  ($.eventName = CreateSecurityGroup) || \n  ($.eventName = DeleteSecurityGroup)\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "SecurityGroupChanges"
                    }
                ]
            }
        },
        "NACLChangeAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-NACLs Have Changed",
                "AlarmDescription": "Alarm if there are any changes to Network ACLs (NACLs)",
                "MetricName": "NACLChanges",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "NACLChangeFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventName = CreateNetworkAcl) || \n  ($.eventName = CreateNetworkAclEntry) || \n  ($.eventName = DeleteNetworkAcl) || \n  ($.eventName = DeleteNetworkAclEntry) || \n  ($.eventName = ReplaceNetworkAclEntry) || \n  ($.eventName = ReplaceNetworkAclAssociation)\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "NACLChanges"
                    }
                ]
            }
        },
        "NetworkGatewayChangeAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-Network Gateways Have Changed",
                "AlarmDescription": "Alarm if there are any changes to network gateways",
                "MetricName": "NetworkGatewayChanges",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "NetworkGatewayChangeFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventName = CreateCustomerGateway) || \n  ($.eventName = DeleteCustomerGateway) || \n  ($.eventName = AttachInternetGateway) || \n  ($.eventName = CreateInternetGateway) || \n  ($.eventName = DeleteInternetGateway) || \n  ($.eventName = DetachInternetGateway)\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "NetworkGatewayChanges"
                    }
                ]
            }
        },
        "RouteTableChangeAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-Route Tables Have Changed",
                "AlarmDescription": "Alarm if there are any changes to route tables",
                "MetricName": "RouteTableChanges",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "RouteTableChangeFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventName = CreateRoute) || \n  ($.eventName = CreateRouteTable) || \n  ($.eventName = ReplaceRoute) || \n  ($.eventName = ReplaceRouteTableAssociation) || \n  ($.eventName = DeleteRouteTable) || \n  ($.eventName = DeleteRoute) || \n  ($.eventName = DisassociateRouteTable)\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "RouteTableChanges"
                    }
                ]
            }
        },
        "VPCChangeAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "CIS-VPC Has Changed",
                "AlarmDescription": "Alarm if there are any changes to any VPCs",
                "MetricName": "VPCChanges",
                "Namespace": "CloudTrailMetrics",
                "Statistic": "Sum",
                "Period": 300,
                "EvaluationPeriods": 1,
                "Threshold": 1,
                "TreatMissingData": "notBreaching",
                "AlarmActions": [
                    {
                        "Ref": "AlarmNotificationTopicARN"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold"
            }
        },
        "VPCChangeFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
                "LogGroupName": {
                    "Ref": "CloudtrailLogGroupName"
                },
                "FilterPattern": "{\n  ($.eventName = CreateVpc) || \n  ($.eventName = DeleteVpc) || \n  ($.eventName = ModifyVpcAttribute) || \n  ($.eventName = AcceptVpcPeeringConnection) || \n  ($.eventName = CreateVpcPeeringConnection) || \n  ($.eventName = DeleteVpcPeeringConnection) || \n  ($.eventName = RejectVpcPeeringConnection) || \n  ($.eventName = AttachClassicLinkVpc) || \n  ($.eventName = DetachClassicLinkVpc) || \n  ($.eventName = DisableVpcClassicLink) || \n  ($.eventName = EnableVpcClassicLink)\n}",
                "MetricTransformations": [
                    {
                        "MetricValue": "1",
                        "MetricNamespace": "CloudTrailMetrics",
                        "MetricName": "VPCChanges"
                    }
                ]
            }
        }
    }
}
